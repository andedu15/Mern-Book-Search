{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anded\\\\OneDrive\\\\Escritorio\\\\Bootcamp\\\\Challenges\\\\Book-Search-Engine\\\\client\\\\src\\\\pages\\\\SearchBooks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { GET_ME } from '../utils/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SearchBooks = () => {\n  _s();\n\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]); // create state for holding our search field data\n\n  const [searchInput, setSearchInput] = useState(''); // create state to hold saved bookId values\n\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  const [saveBook, {\n    error\n  }] = useMutation(SAVE_BOOK, {\n    // The below block ensures that as soon as the user saves a book, it appears right away in the saved books page\n    update(cache, _ref) {\n      let {\n        data: {\n          saveBook\n        }\n      } = _ref;\n\n      try {\n        const {\n          me\n        } = cache.readQuery({\n          query: GET_ME\n        });\n        cache.writeQuery({\n          query: GET_ME,\n          data: {\n            me: { ...me,\n              savedBooks: [...me.savedBooks, saveBook.savedBooks[saveBook.savedBooks.length - 1]]\n            }\n          }\n        });\n      } catch (e) {}\n    }\n\n  });\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  }); // create method to search for books and set state on form submit\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const {\n        items\n      } = await response.json();\n      const bookData = items.map(book => {\n        var _book$volumeInfo$imag;\n\n        return {\n          bookId: book.id,\n          link: book.volumeInfo.previewLink,\n          authors: book.volumeInfo.authors || ['No author to display'],\n          title: book.volumeInfo.title,\n          description: book.volumeInfo.description,\n          image: ((_book$volumeInfo$imag = book.volumeInfo.imageLinks) === null || _book$volumeInfo$imag === void 0 ? void 0 : _book$volumeInfo$imag.thumbnail) || ''\n        };\n      });\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  }; // create function to handle saving a book to our database\n\n\n  const handleSaveBook = async bookId => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find(book => book.bookId === bookId); // get tokens\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveBook({\n        variables: {\n          bookToSave\n        }\n      }); // if book successfully saves to user's account, save book id to state\n\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n      saveBookIds(savedBookIds);\n    } catch (err) {\n      // console.log(error.networkError.result.errors);\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"text-light bg-dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Search for Books!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleFormSubmit,\n          children: /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 12,\n              md: 8,\n              children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                name: \"searchInput\",\n                value: searchInput,\n                onChange: e => setSearchInput(e.target.value),\n                type: \"text\",\n                size: \"lg\",\n                placeholder: \"Search for a book\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 12,\n              md: 4,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"success\",\n                size: \"lg\",\n                children: \"Submit Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: searchedBooks.length ? `Viewing ${searchedBooks.length} results:` : 'Search for a book to begin'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: searchedBooks.map(book => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            border: \"dark\",\n            children: [book.image ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              src: book.image,\n              alt: `The cover for ${book.title}`,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: book.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small\",\n                children: [\"Authors: \", book.authors]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: book.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 19\n              }, this), Auth.loggedIn() && /*#__PURE__*/_jsxDEV(Button, {\n                disabled: savedBookIds === null || savedBookIds === void 0 ? void 0 : savedBookIds.some(savedBookId => savedBookId === book.bookId),\n                className: \"btn-block btn-info\",\n                onClick: () => handleSaveBook(book.bookId),\n                children: savedBookIds !== null && savedBookIds !== void 0 && savedBookIds.some(savedBookId => savedBookId === book.bookId) ? 'This book has already been saved!' : 'Save this Book!'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                target: \"_blank\",\n                rel: \"noreferrer noopener\",\n                id: \"link\",\n                href: book.link,\n                children: book.link == null ? 'No link available' : 'Link to google'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this)]\n          }, book.bookId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SearchBooks, \"CLefhZU9CbRq9/kZDZWCw9TaswU=\", false, function () {\n  return [useMutation];\n});\n\n_c = SearchBooks;\nexport default SearchBooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBooks\");","map":{"version":3,"names":["React","useState","useEffect","Jumbotron","Container","Col","Form","Button","Card","CardColumns","Auth","searchGoogleBooks","saveBookIds","getSavedBookIds","useMutation","SAVE_BOOK","GET_ME","SearchBooks","searchedBooks","setSearchedBooks","searchInput","setSearchInput","savedBookIds","setSavedBookIds","saveBook","error","update","cache","data","me","readQuery","query","writeQuery","savedBooks","length","e","handleFormSubmit","event","preventDefault","response","ok","Error","items","json","bookData","map","book","bookId","id","link","volumeInfo","previewLink","authors","title","description","image","imageLinks","thumbnail","err","console","handleSaveBook","bookToSave","find","token","loggedIn","getToken","variables","target","value","some","savedBookId"],"sources":["C:/Users/anded/OneDrive/Escritorio/Bootcamp/Challenges/Book-Search-Engine/client/src/pages/SearchBooks.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nimport { GET_ME } from '../utils/queries';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK, {\n    // The below block ensures that as soon as the user saves a book, it appears right away in the saved books page\n    update(cache, { data: { saveBook } }) {\n      try {\n        const { me } = cache.readQuery({\n          query: GET_ME,\n        });\n\n        cache.writeQuery({\n          query: GET_ME,\n          data: {\n            me: {\n              ...me,\n              savedBooks: [\n                ...me.savedBooks,\n                saveBook.savedBooks[saveBook.savedBooks.length - 1],\n              ],\n            },\n          },\n        });\n      } catch (e) {}\n    },\n  });\n\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        link: book.volumeInfo.previewLink,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get tokens\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveBook({\n        variables: { bookToSave },\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n      saveBookIds(savedBookIds);\n    } catch (err) {\n      // console.log(error.networkError.result.errors);\n\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                  <a\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                    id=\"link\"\n                    href={book.link}\n                  >\n                    {book.link == null ? 'No link available' : 'Link to google'}\n                  </a>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}